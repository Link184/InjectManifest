apply plugin: 'com.android.application'
apply plugin: 'com.whyn.plugin.injectmanifest'
//
//manifestPath {
//    //the defautl Collections.xml path
////    originManifestPath "$project.projectDir/AndroidManifest1111.xml"
//    originManifestPath android.sourceSets.main.manifest.srcFile.absolutePath
//    //the Collections.xml path generated by annotation processor
//    genManifestPath "$project.projectDir/gen/AndroidManifest1111.xml"
//}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    sourceSets{
        main{
//            manifest.srcFile project.projectDir.absolutePath + '/src/main/AndroidManifestOld.xml'
        }
    }
    defaultConfig {
        applicationId "com.yn.injectmanifest"
        minSdkVersion 18
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        javaCompileOptions {
//            annotationProcessorOptions {
////                arguments = [AndroidManifestPath: 'D:/Android/Projects/InjectManifest/sample/src/main/Collections.xml']
////                arguments = [AndroidManifestPath: project.projectDir.getAbsolutePath()+'/src/main/Collections.xml']
////                arguments = [AndroidManifestPath: project.projectDir.absolutePath + '/src/main/Collections.xml']
////                arguments = [AndroidManifestPath: android.sourceSets.main.manifest.srcFile.getAbsolutePath()]
//                arguments = [AndroidManifestPath: android.sourceSets.main.manifest.srcFile.absolutePath]
//
//            }
//        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.1'
    testCompile 'junit:junit:4.12'

    compile project(':injectmanifest-annotations')
    compile project(':injectmanifest-compiler')
}

//D:\Android\Projects\InjectManifest\sample\build\generated\source\apt\debug\Collections.xml
//$buildDir\generated\source\apt\debug\AndroidManifest001.xml
//task test2 {
//    doLast {
//        print "rootProject.path = "
////        println "${buildDir}"  // D:\Android\Projects\InjectManifest\sample\build
//        println "$projectDir" //D:\Android\Projects\InjectManifest\sample
//    }
//}

//task renamManifest(type: Copy) {
//    from("${projectDir}/src/main/")
//    into("${projectDir}/src/main/")
//    include('Collections.xml')
//    rename('Collections.xml', 'AndroidManifest_old.xml')
//}

//task copyXml(type: Copy) {
//    from("$buildDir/generated/source/apt/debug/")
//    into("$projectDir/src/main/")
//    include('Collections.xml')
//}
//copyXml.dependsOn renamManifest

//afterEvaluate {
//    println 'afterEvaluate is done'
////    checkDebugManifest.dependsOn whyn
//    project.android['applicationVariants'].all { variant ->
//        def javaCompile = variant.hasProperty('javaCompiler') ? variant.javaCompiler : variant.javaCompile
//        javaCompile.doLast {
//            println 'javaCompile do last'
//            def generatedSourcesFolder = new File(project.buildDir, 'generated/source/apt/debug/Collections.xml')
//            def targetDirectory = new File(project.projectDir, 'src/main/Collections.xml');
//            if (generatedSourcesFolder.exists()) {
//                if (targetDirectory.exists())
//                    targetDirectory.delete()
//                if (generatedSourcesFolder.renameTo(targetDirectory)) {
//                    // Success!!1 Files moved.
//                    println 'file move success'
//                }
//            }
//        }
//    }
//}
//
//task whyn {
//    doFirst {
//        project.android['applicationVariants'].all { variant ->
//            def javaCompile = variant.hasProperty('javaCompiler') ? variant.javaCompiler : variant.javaCompile
//            javaCompile.doLast {
//                println 'javaCompile do last'
//                def generatedSourcesFolder = new File(project.buildDir, 'generated/source/apt/debug/Collections.xml')
//                def targetDirectory = new File(project.projectDir, 'src/main/Collections.xml');
//                if (generatedSourcesFolder.exists()) {
//                    if (targetDirectory.exists())
//                        targetDirectory.delete()
//                    if (generatedSourcesFolder.renameTo(targetDirectory)) {
//                        // Success!!1 Files moved.
//                        println 'file move success'
//                    }
//                }
//            }
//        }
//    }
//}
//
//
//task copyManifest {
//    doLast {
//        def manifestFile = file("$buildDir/generated/source/apt/debug/")
//        if (manifestFile.exists()) {
//
//        }
//    }
//}
//
//task genTest {
//    project.android['applicationVariants'].all { variant ->
//        def javaCompile = variant.hasProperty('javaCompiler') ? variant.javaCompiler : variant.javaCompile
//        javaCompile.doLast {
//            println 'javaCompile do last'
//            def generatedSourcesFolder = new File(project.buildDir, 'generated/source/apt/debug/Collections.xml')
//            def targetDirectory = new File(project.projectDir, 'some/src/main/');
//            if (generatedSourcesFolder.renameTo(targetDirectory)) {
//                // Success!!1 Files moved.
//                println 'file move success'
//            }
//        }
//    }
//}
//
